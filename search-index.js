var N=null,E="",T="t",U="u",searchIndex={};
var R=["A type level dimension.","dimnameprod","complex","outer","4-dimension ket (for entangled states)","result","dynamic","to_owned","clone_into","try_from","try_into","borrow_mut","to_subset","is_in_subset","to_subset_unchecked","from_subset","type_id","borrow","typeid","option","to_string","try_to_usize","from_usize","formatter","matrixmn"];

searchIndex["brakets"]={"doc":"Strongly-typed bra-ket notation for discrete quantum…","i":[[6,"Complex","brakets",E,N,N],[3,"U8",E,R[0],N,N],[3,"U16",E,R[0],N,N],[3,"U32",E,R[0],N,N],[3,"U64",E,R[0],N,N],[3,"Bra",E,"Generic Bra. You can multiply it by ket to get an inner…",N,N],[3,"Ket",E,"Generic ket. You can multiply it by bra to an outer…",N,N],[3,"Outer",E,"Outer product in bra-ket notation, as well used as a…",N,N],[11,"up",E,"2-dimension \"up\" bra",0,[[],[["u2"],["bra",["u2"]]]]],[11,"down",E,"2-dimension \"down\" bra",0,[[],[["u2"],["bra",["u2"]]]]],[11,"right",E,"2-dimension \"right\" bra",0,[[],[["u2"],["bra",["u2"]]]]],[11,"left",E,"2-dimension \"left\" bra",0,[[],[["u2"],["bra",["u2"]]]]],[11,"inw",E,"2-dimension \"inward\" bra",0,[[],[["u2"],["bra",["u2"]]]]],[11,"out",E,"2-dimension \"outward\" bra",0,[[],[["u2"],["bra",["u2"]]]]],[11,"up",E,"Up 2-dimension ket, [1, 0]",1,[[],[["ket",["u2"]],["u2"]]]],[11,"down",E,"Down 2-dimension ket, [0, 1]",1,[[],[["ket",["u2"]],["u2"]]]],[11,"right",E,"Right 2-dimension ket, 1/√2[1, 1]",1,[[],[["ket",["u2"]],["u2"]]]],[11,"left",E,"Left 2-dimension ket, 1/√2[1, -1]",1,[[],[["ket",["u2"]],["u2"]]]],[11,"inw",E,"Inward 2-dimension ket, 1/√2[1, i]",1,[[],[["ket",["u2"]],["u2"]]]],[11,"out",E,"Outward 2-dimension ket, 1/√2[1, -i]",1,[[],[["ket",["u2"]],["u2"]]]],[11,"cross",E,"Kronecker (tensor) product of two kets",1,[[["ket"]],[[R[1]],["ket",[R[1]]]]]],[11,"from_bits",E,"Cross product of basis (|up> & |down>) qubits picked from…",1,[[["u16"]],[["ket"],["str"],[R[5],["ket","str"]]]]],[11,"into_matrix",E,"Deconstruct the outer product returning the inner matrix.",2,[[],[[R[2]],[R[24],[R[2]]]]]],[11,"h2",E,"H2 (2 dim hadamard) operator",2,[[],[[R[3],["u2"]],["u2"]]]],[11,"z2",E,"Z2 (2 dim Z-gate) operator",2,[[],[[R[3],["u2"]],["u2"]]]],[11,"n2",E,"N2 (2 dim N-gate) operator",2,[[],[[R[3],["u2"]],["u2"]]]],[11,"cnot",E,"CNOT (2*2 dim) operator",2,[[],[[R[3],["u4"]],["u4"]]]],[11,"qft",E,"Quantum Fourier Transform (QFT) matrix operator",2,[[],[R[3]]]],[6,"Bra2",E,"2-dimension bra",N,N],[6,"Ket2",E,"2-dimension ket",N,N],[6,"Outer2",E,"2-dimension outer",N,N],[6,"Bra4",E,"4-dimension bra (for entangled states)",N,N],[6,"Ket4",E,R[4],N,N],[6,"Outer4",E,R[4],N,N],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"],[T]]]],[11,R[9],E,E,3,[[[U]],[R[5]]]],[11,R[10],E,E,3,[[],[R[5]]]],[11,R[17],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[R[18]]]],[11,"add",E,E,3,[[[R[6]]],[R[6]]]],[11,"add",E,E,3,[[["d2"]]]],[11,"add",E,E,3,[[["d2"]]]],[11,"mul",E,E,3,[[["d2"]]]],[11,"mul",E,E,3,[[[R[6]]],[R[6]]]],[11,"mul",E,E,3,[[["d2"]]]],[11,"sub",E,E,3,[[[R[6]]],[R[6]]]],[11,"sub",E,E,3,[[["d2"]]]],[11,"sub",E,E,3,[[["d2"]]]],[11,"div",E,E,3,[[["d2"]]]],[11,"div",E,E,3,[[[R[6]]],[R[6]]]],[11,"div",E,E,3,[[["d2"]]]],[11,"min",E,E,3,[[[R[6]]],[R[6]]]],[11,"min",E,E,3,[[["d2"]]]],[11,"min",E,E,3,[[["d2"]]]],[11,"max",E,E,3,[[["d2"]]]],[11,"max",E,E,3,[[[R[6]]],[R[6]]]],[11,"max",E,E,3,[[["d2"]]]],[11,R[12],E,E,3,[[["self"]],[R[19]]]],[11,R[13],E,E,3,[[["self"]],["bool"]]],[11,R[14],E,E,3,[[["self"]],["ss"]]],[11,R[15],E,E,3,[[["ss"]],["sp"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[7],E,E,4,[[["self"]],[T]]],[11,R[8],E,E,4,[[["self"],[T]]]],[11,R[9],E,E,4,[[[U]],[R[5]]]],[11,R[10],E,E,4,[[],[R[5]]]],[11,R[17],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"]],[R[18]]]],[11,"add",E,E,4,[[[R[6]]],[R[6]]]],[11,"add",E,E,4,[[["d2"]]]],[11,"add",E,E,4,[[["d2"]]]],[11,"mul",E,E,4,[[["d2"]]]],[11,"mul",E,E,4,[[[R[6]]],[R[6]]]],[11,"mul",E,E,4,[[["d2"]]]],[11,"sub",E,E,4,[[[R[6]]],[R[6]]]],[11,"sub",E,E,4,[[["d2"]]]],[11,"sub",E,E,4,[[["d2"]]]],[11,"div",E,E,4,[[["d2"]]]],[11,"div",E,E,4,[[[R[6]]],[R[6]]]],[11,"div",E,E,4,[[["d2"]]]],[11,"min",E,E,4,[[[R[6]]],[R[6]]]],[11,"min",E,E,4,[[["d2"]]]],[11,"min",E,E,4,[[["d2"]]]],[11,"max",E,E,4,[[["d2"]]]],[11,"max",E,E,4,[[[R[6]]],[R[6]]]],[11,"max",E,E,4,[[["d2"]]]],[11,R[12],E,E,4,[[["self"]],[R[19]]]],[11,R[13],E,E,4,[[["self"]],["bool"]]],[11,R[14],E,E,4,[[["self"]],["ss"]]],[11,R[15],E,E,4,[[["ss"]],["sp"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[7],E,E,5,[[["self"]],[T]]],[11,R[8],E,E,5,[[["self"],[T]]]],[11,R[9],E,E,5,[[[U]],[R[5]]]],[11,R[10],E,E,5,[[],[R[5]]]],[11,R[17],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[["self"]],[R[18]]]],[11,"add",E,E,5,[[[R[6]]],[R[6]]]],[11,"add",E,E,5,[[["d2"]]]],[11,"add",E,E,5,[[["d2"]]]],[11,"mul",E,E,5,[[["d2"]]]],[11,"mul",E,E,5,[[[R[6]]],[R[6]]]],[11,"mul",E,E,5,[[["d2"]]]],[11,"sub",E,E,5,[[[R[6]]],[R[6]]]],[11,"sub",E,E,5,[[["d2"]]]],[11,"sub",E,E,5,[[["d2"]]]],[11,"div",E,E,5,[[["d2"]]]],[11,"div",E,E,5,[[[R[6]]],[R[6]]]],[11,"div",E,E,5,[[["d2"]]]],[11,"min",E,E,5,[[[R[6]]],[R[6]]]],[11,"min",E,E,5,[[["d2"]]]],[11,"min",E,E,5,[[["d2"]]]],[11,"max",E,E,5,[[["d2"]]]],[11,"max",E,E,5,[[[R[6]]],[R[6]]]],[11,"max",E,E,5,[[["d2"]]]],[11,R[12],E,E,5,[[["self"]],[R[19]]]],[11,R[13],E,E,5,[[["self"]],["bool"]]],[11,R[14],E,E,5,[[["self"]],["ss"]]],[11,R[15],E,E,5,[[["ss"]],["sp"]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[7],E,E,6,[[["self"]],[T]]],[11,R[8],E,E,6,[[["self"],[T]]]],[11,R[9],E,E,6,[[[U]],[R[5]]]],[11,R[10],E,E,6,[[],[R[5]]]],[11,R[17],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[["self"]],[R[18]]]],[11,"add",E,E,6,[[[R[6]]],[R[6]]]],[11,"add",E,E,6,[[["d2"]]]],[11,"add",E,E,6,[[["d2"]]]],[11,"mul",E,E,6,[[["d2"]]]],[11,"mul",E,E,6,[[[R[6]]],[R[6]]]],[11,"mul",E,E,6,[[["d2"]]]],[11,"sub",E,E,6,[[[R[6]]],[R[6]]]],[11,"sub",E,E,6,[[["d2"]]]],[11,"sub",E,E,6,[[["d2"]]]],[11,"div",E,E,6,[[["d2"]]]],[11,"div",E,E,6,[[[R[6]]],[R[6]]]],[11,"div",E,E,6,[[["d2"]]]],[11,"min",E,E,6,[[[R[6]]],[R[6]]]],[11,"min",E,E,6,[[["d2"]]]],[11,"min",E,E,6,[[["d2"]]]],[11,"max",E,E,6,[[["d2"]]]],[11,"max",E,E,6,[[[R[6]]],[R[6]]]],[11,"max",E,E,6,[[["d2"]]]],[11,R[12],E,E,6,[[["self"]],[R[19]]]],[11,R[13],E,E,6,[[["self"]],["bool"]]],[11,R[14],E,E,6,[[["self"]],["ss"]]],[11,R[15],E,E,6,[[["ss"]],["sp"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[20],E,E,0,[[["self"]],["string"]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"],[T]]]],[11,R[9],E,E,0,[[[U]],[R[5]]]],[11,R[10],E,E,0,[[],[R[5]]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,R[12],E,E,0,[[["self"]],[R[19]]]],[11,R[13],E,E,0,[[["self"]],["bool"]]],[11,R[14],E,E,0,[[["self"]],["ss"]]],[11,R[15],E,E,0,[[["ss"]],["sp"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[20],E,E,1,[[["self"]],["string"]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"],[T]]]],[11,R[9],E,E,1,[[[U]],[R[5]]]],[11,R[10],E,E,1,[[],[R[5]]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,R[12],E,E,1,[[["self"]],[R[19]]]],[11,R[13],E,E,1,[[["self"]],["bool"]]],[11,R[14],E,E,1,[[["self"]],["ss"]]],[11,R[15],E,E,1,[[["ss"]],["sp"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[20],E,E,2,[[["self"]],["string"]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"],[T]]]],[11,R[9],E,E,2,[[[U]],[R[5]]]],[11,R[10],E,E,2,[[],[R[5]]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,R[12],E,E,2,[[["self"]],[R[19]]]],[11,R[13],E,E,2,[[["self"]],["bool"]]],[11,R[14],E,E,2,[[["self"]],["ss"]]],[11,R[15],E,E,2,[[["ss"]],["sp"]]],[11,"clone",E,E,3,[[["self"]],["u8"]]],[11,"clone",E,E,4,[[["self"]],["u16"]]],[11,"clone",E,E,5,[[["self"]],["u32"]]],[11,"clone",E,E,6,[[["self"]],["u64"]]],[11,"hash",E,E,3,[[["self"],["__h"]]]],[11,"hash",E,E,5,[[["self"],["__h"]]]],[11,"hash",E,E,6,[[["self"],["__h"]]]],[11,"hash",E,E,4,[[["self"],["__h"]]]],[11,"name",E,E,6,[[],["u64"]]],[11,"name",E,E,5,[[],["u32"]]],[11,"name",E,E,3,[[],["u8"]]],[11,"name",E,E,4,[[],["u16"]]],[11,"eq",E,E,6,[[["self"],["u64"]],["bool"]]],[11,"eq",E,E,5,[[["self"],["u32"]],["bool"]]],[11,"eq",E,E,4,[[["self"],["u16"]],["bool"]]],[11,"eq",E,E,3,[[["self"],["u8"]],["bool"]]],[11,R[21],E,E,3,[[],[[R[19],["usize"]],["usize"]]]],[11,R[22],E,E,3,[[["usize"]],["u8"]]],[11,"value",E,E,3,[[["self"]],["usize"]]],[11,R[21],E,E,6,[[],[[R[19],["usize"]],["usize"]]]],[11,R[22],E,E,6,[[["usize"]],["u64"]]],[11,"value",E,E,6,[[["self"]],["usize"]]],[11,R[21],E,E,5,[[],[[R[19],["usize"]],["usize"]]]],[11,R[22],E,E,5,[[["usize"]],["u32"]]],[11,"value",E,E,5,[[["self"]],["usize"]]],[11,R[21],E,E,4,[[],[[R[19],["usize"]],["usize"]]]],[11,R[22],E,E,4,[[["usize"]],["u16"]]],[11,"value",E,E,4,[[["self"]],["usize"]]],[11,"fmt",E,E,6,[[["self"],[R[23]]],[[R[5],["error"]],["error"]]]],[11,"fmt",E,E,4,[[["self"],[R[23]]],[[R[5],["error"]],["error"]]]],[11,"fmt",E,E,5,[[["self"],[R[23]]],[[R[5],["error"]],["error"]]]],[11,"fmt",E,E,3,[[["self"],[R[23]]],[[R[5],["error"]],["error"]]]],[11,"from",E,E,0,[[["ket"]],["self"]]],[11,"from",E,E,0,[[["rowvectorn",[R[2]]],[R[2]]],["self"]]],[11,"from",E,E,1,[[["bra"]],["self"]]],[11,"from",E,E,1,[[[R[2]],["vectorn",[R[2]]]],["self"]]],[11,"from",E,E,2,[[[R[2]],[R[24],[R[2]]]],["self"]]],[11,"eq",E,E,0,[[["self"],["bra"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["bra"]],["bool"]]],[11,"eq",E,E,1,[[["self"],["ket"]],["bool"]]],[11,"ne",E,E,1,[[["self"],["ket"]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[3]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[3]]],["bool"]]],[11,"clone",E,E,0,[[["self"]],["bra"]]],[11,"clone",E,E,1,[[["self"]],["ket"]]],[11,"clone",E,E,2,[[["self"]],[R[3]]]],[11,"fmt",E,E,0,[[["self"],[R[23]]],[R[5]]]],[11,"fmt",E,E,1,[[["self"],[R[23]]],[R[5]]]],[11,"fmt",E,E,2,[[["self"],[R[23]]],[R[5]]]],[11,"fmt",E,E,0,[[["self"],[R[23]]],[R[5]]]],[11,"fmt",E,E,1,[[["self"],[R[23]]],[R[5]]]],[11,"fmt",E,E,2,[[["self"],[R[23]]],[R[5]]]],[11,"add",E,E,0,[[["bra"]]]],[11,"add",E,E,1,[[["ket"]]]],[11,"add",E,E,2,[[[R[3]]]]],[11,"mul",E,E,0,[[["ket"]]]],[11,"mul",E,E,0,[[[R[3]]]]],[11,"mul",E,E,0,[[[R[2]]]]],[11,"mul",E,E,1,[[["bra"]]]],[11,"mul",E,E,1,[[[R[2]]]]],[11,"mul",E,E,2,[[["ket"]]]],[11,"mul",E,E,2,[[["f64"]]]]],"p":[[3,"Bra"],[3,"Ket"],[3,"Outer"],[3,"U8"],[3,"U16"],[3,"U32"],[3,"U64"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);